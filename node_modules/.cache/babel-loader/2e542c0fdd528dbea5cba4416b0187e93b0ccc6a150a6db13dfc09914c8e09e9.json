{"ast":null,"code":"import axios from 'axios';\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from '../constants/config';\nconst API_URL = 'http://localhost:8080';\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    \"content-type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(function (config) {\n  // if (config.TYPE.params) {\n  //     config.params = config.TYPE.params\n  // } else if (config.TYPE.query) {\n  //     config.url = config.url + '/' + config.TYPE.query;\n  // }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  // Stop global loader here\n  return processResponse(response);\n}, function (error) {\n  // Stop global loader here\n  return Promise.reject(ProcessError(error));\n});\nconst processResponse = response => {\n  if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n    return {\n      isSuccess: true,\n      data: response.data\n    };\n  } else {\n    return {\n      isFailure: true,\n      status: response === null || response === void 0 ? void 0 : response.status,\n      msg: response === null || response === void 0 ? void 0 : response.msg,\n      code: response === null || response === void 0 ? void 0 : response.code\n    };\n  }\n};\nconst ProcessError = async error => {\n  if (error.response) {\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.responseFailure,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.requestFailure,\n      code: \"\"\n    };\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.networkError,\n      code: \"\"\n    };\n  }\n};\n_c = ProcessError;\nconst API = {};\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n  API[key] = (body, showUploadProgress, showDownloadProgress) => axiosInstance({\n    method: value.method,\n    url: value.url,\n    data: value.method === 'DELETE' ? '' : body,\n    responseType: value.responseType,\n    headers: {\n      authorization: getAccessToken()\n    },\n    TYPE: getType(value, body),\n    onUploadProgress: function (progressEvent) {\n      if (showUploadProgress) {\n        let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showUploadProgress(percentCompleted);\n      }\n    },\n    onDownloadProgress: function (progressEvent) {\n      if (showDownloadProgress) {\n        let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showDownloadProgress(percentCompleted);\n      }\n    }\n  });\n}\nexport { API };\nvar _c;\n$RefreshReg$(_c, \"ProcessError\");","map":{"version":3,"names":["axios","API_NOTIFICATION_MESSAGES","SERVICE_URLS","API_URL","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","error","Promise","reject","response","processResponse","ProcessError","status","isSuccess","data","isFailure","msg","code","console","log","toJSON","isError","responseFailure","requestFailure","networkError","_c","API","key","value","Object","entries","body","showUploadProgress","showDownloadProgress","method","url","responseType","authorization","getAccessToken","TYPE","getType","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","onDownloadProgress","$RefreshReg$"],"sources":["/home/tripti/Documents/project/Blog-Application/code/src/service/api.js"],"sourcesContent":["import axios from 'axios';\n\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from '../constants/config';\nconst API_URL = 'http://localhost:8080';\n\nconst axiosInstance = axios.create({\n    baseURL: API_URL,\n    timeout: 10000,\n    headers: {\n        \"content-type\": \"application/json\"\n    }\n});\n\naxiosInstance.interceptors.request.use(\n    function (config) {\n        // if (config.TYPE.params) {\n        //     config.params = config.TYPE.params\n        // } else if (config.TYPE.query) {\n        //     config.url = config.url + '/' + config.TYPE.query;\n        // }\n        return config;\n    },\n    function (error) {\n        return Promise.reject(error);\n    }\n);\n\naxiosInstance.interceptors.response.use(\n    function (response) {\n        // Stop global loader here\n        return processResponse(response);\n    },\n    function (error) {\n        // Stop global loader here\n        return Promise.reject(ProcessError(error));\n    }\n)\n\nconst processResponse = (response) => {\n    if (response?.status === 200) {\n        return { isSuccess: true, data: response.data }\n    } else {\n        return {\n            isFailure: true,\n            status: response?.status,\n            msg: response?.msg,\n            code: response?.code\n        }\n    }\n}\n\nconst ProcessError = async (error) => {\n    if (error.response) {\n        console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n        return {\n            isError: true,\n            msg: API_NOTIFICATION_MESSAGES.responseFailure,\n            code: error.response.status\n        }\n    } else if (error.request) {\n        // The request was made but no response was received\n        console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n        return {\n            isError: true,\n            msg: API_NOTIFICATION_MESSAGES.requestFailure,\n            code: \"\"\n        }\n    } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n        return {\n            isError: true,\n            msg: API_NOTIFICATION_MESSAGES.networkError,\n            code: \"\"\n        }\n    }\n}\n\nconst API = {};\n\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n    API[key] = (body, showUploadProgress, showDownloadProgress) =>\n        axiosInstance({\n            method: value.method,\n            url: value.url,\n            data: value.method === 'DELETE' ? '' : body,\n            responseType: value.responseType,\n            headers: {\n                authorization: getAccessToken(),\n            },\n            TYPE: getType(value, body),\n            onUploadProgress: function(progressEvent) {\n                if (showUploadProgress) {\n                    let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n                    showUploadProgress(percentCompleted);\n                }\n            },\n            onDownloadProgress: function(progressEvent) {\n                if (showDownloadProgress) {\n                    let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n                    showDownloadProgress(percentCompleted);\n                }\n            }\n        });\n}\n\nexport { API };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}